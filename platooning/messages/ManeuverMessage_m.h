//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/platooning/messages/ManeuverMessage.msg.
//

#ifndef __MANEUVERMESSAGE_M_H
#define __MANEUVERMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    /** message type for maneuver messages */
    static const int MANEUVER_TYPE = 12347;
// }}

/**
 * Class generated from <tt>veins/modules/application/platooning/messages/ManeuverMessage.msg:26</tt> by nedtool.
 * <pre>
 * // General message for an arbitrary maneuver to holds common information.
 * // Only children of this message should be initialized.
 * packet ManeuverMessage
 * {
 *     // id of the originator of this message
 *     int vehicleId;
 *     // id of the platoon this message is about
 *     int platoonId;
 *     // id of the destination of this message
 *     int destinationId;
 *     // sumo external id of the sender
 *     string externalId;
 * }
 * </pre>
 */
class ManeuverMessage : public ::omnetpp::cPacket
{
  protected:
    int vehicleId;
    int platoonId;
    int destinationId;
    ::omnetpp::opp_string externalId;

  private:
    void copy(const ManeuverMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ManeuverMessage&);

  public:
    ManeuverMessage(const char *name=nullptr, short kind=0);
    ManeuverMessage(const ManeuverMessage& other);
    virtual ~ManeuverMessage();
    ManeuverMessage& operator=(const ManeuverMessage& other);
    virtual ManeuverMessage *dup() const override {return new ManeuverMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getVehicleId() const;
    virtual void setVehicleId(int vehicleId);
    virtual int getPlatoonId() const;
    virtual void setPlatoonId(int platoonId);
    virtual int getDestinationId() const;
    virtual void setDestinationId(int destinationId);
    virtual const char * getExternalId() const;
    virtual void setExternalId(const char * externalId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ManeuverMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ManeuverMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MANEUVERMESSAGE_M_H

